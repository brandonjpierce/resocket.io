!function(t){function e(s){if(n[s])return n[s].exports;var i=n[s]={exports:{},id:s,loaded:!1};return t[s].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){var s=n(1),i=function(t){function e(t){return t&&"[object Function]"==={}.toString.call(t)}var n=t?s.connect(t):s.connect();return{componentWillMount:function(){if(this.socketEvents={},!this.listeners)throw new Error("SocketMixin requires listeners to be defined on the component");for(var t in this.listeners)if(this.listeners.hasOwnProperty(t)){var s=this.listeners[t];if(!e(s))throw new Error('Listener: "'+t+'" is not a function');this.socketEvents[t]=s.bind(this),n.on(t,this.socketEvents[t])}},componentWillUnmount:function(){this.socketOffAll()},socketEmit:function(t,e){t&&n.emit(t,e)},socketOn:function(t){this.listeners&&t&&(this.socketEvents[t]=this.listeners[t].bind(this),n.on(t,this.socketEvents[t]))},socketOff:function(t){this.listeners&&t&&e(this.listeners[t])&&(n.removeListener(t,this.socketEvents[t]),this.socketEvents[t]=null)},socketOffAll:function(){if(this.listeners){for(var t in this.listeners)this.listeners.hasOwnProperty(t)&&e(this.listeners[t])&&n.removeListener(t,this.socketEvents[t]);this.socketEvents=null}}}};t.exports=i},function(t){t.exports=io}]);